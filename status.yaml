# Status configuration

# Controller status indicator
output:
  - platform: ledc
    id: ${node_name}_controller_status
    pin: GPIO33

# System status indicator
light:
  - platform: status_led
    name: $node_prefix systemstatus
    id: ${node_name}_system_status_indicator
    pin:
      number: GPIO32
      inverted: true
# Controller status indicator
  - platform: monochromatic
    name: $node_prefix reglerstatus
    id: ${node_name}_controller_status_indicator
    output: ${node_name}_controller_status
    effects:
      - pulse:
          name: auto_mode
          transition_length: 0.2s
          update_interval: 0.6s
      - pulse:
          name: semiauto_mode
          transition_length: 0.2s
          update_interval: 2s
      - pulse:
          name: manual_mode
          transition_length: 0.2s
          update_interval: 4s

# Controller operational status codes
sensor:
  - platform: template
    name: $node_prefix driftl채ge
    id: ${node_name}_controller_status_code
    icon: mdi:message
    accuracy_decimals: 0
    update_interval: 4s
    lambda: |-
      static int op_code = 1;
      auto call = id(${node_name}_controller_status_indicator).turn_on();
      // Inactive
      if ( id(${node_name}_supply_line_controller).mode == CLIMATE_MODE_OFF ) {
        op_code = 0;
      }
      // Automatic mode
      if ( (id(${node_name}_controller_mode).state) && 
           (id(${node_name}_outdoor_temp_compensated_mode).state) ) {
        op_code = 1;
        call.set_effect("auto_mode");
      }
      // Semi-automatic mode
      if ( (id(${node_name}_controller_mode).state) && 
           (id(${node_name}_outdoor_temp_compensated_mode).state == 0) ) {
        op_code = 2;
        call.set_effect("semiauto_mode");
      }
      // Manual mode
      if ( (id(mixing_valve_manual_decrease).state) || 
           (id(mixing_valve_manual_increase).state) ) {
        op_code = 3;
        call.set_effect("none");
      }
      if ( op_code == 0 ) {
        call = id(${node_name}_controller_status_indicator).turn_off();
      }
      id(${node_name}_controller_status_code).publish_state(op_code);
      id(${node_name}_controller_status_message).update();
      call.perform();
      return op_code;

# Controller operational status messages
text_sensor:
  - platform: template
    name: $node_prefix driftmeddelande
    id: ${node_name}_controller_status_message
    icon: mdi:message
    lambda: |-
      int op_code = id(${node_name}_controller_status_code).state;
      std::string op_message = "";
      if ( op_code == 0 )
        op_message = "S.0 Inaktiv";
      if ( op_code == 1 )
        op_message = "S.1 Automatiskt driftl채ge";
      if ( op_code == 2 )
        op_message = "S.2 Halvautomatiskt driftl채ge";
      if ( op_code == 3 )
        op_message = "S.3 Manuellt driftl채ge";
      return {op_message};
